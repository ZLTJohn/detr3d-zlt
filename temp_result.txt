6
tensor([0, 0, 0, 0, 0, 0, 0, 0, 0], device='cuda:0')
LiDARInstance3DBoxes(
    tensor([[-1.8533e+00, -2.8750e+00, -1.8414e-01,  1.9900e+00,  4.6200e+00,
          2.3300e+00, -1.5700e+00],
        [ 5.2549e+01, -2.7542e+00, -8.9313e-02,  2.0700e+00,  4.8600e+00,
          1.8100e+00, -1.5700e+00],
        [ 1.6786e+01, -2.9871e+00, -3.7942e-01,  2.0300e+00,  3.7700e+00,
          2.2200e+00, -1.5500e+00],
        [ 3.8370e+00, -2.7635e+00, -2.1888e-01,  2.1000e+00,  4.8800e+00,
          2.4500e+00, -1.5700e+00],
        [ 3.7573e+01, -7.1503e+00, -2.2457e-01,  2.2000e+00,  4.5200e+00,
          2.1000e+00, -1.6500e+00],
        [ 4.4221e+01,  7.2841e+00, -6.0861e-02,  2.2700e+00,  4.8100e+00,
          2.1300e+00, -1.4800e+00],
        [ 3.7216e+01, -9.5181e+00, -1.4017e-01,  2.0000e+00,  4.7400e+00,
          1.8800e+00, -1.4900e+00],
        [ 2.8736e+01, -2.8962e+00, -4.6982e-01,  2.1200e+00,  4.6600e+00,
          1.8300e+00, -1.5600e+00],
        [ 6.2291e+01, -2.7083e+00,  2.7387e-01,  1.9400e+00,  4.4600e+00,
          2.0300e+00, -1.5300e+00]]))

gt list len: 1
        # print(num_dec_layers)  # 6
        # print(gt_labels_list[0])  # shape [num_box,1]
        # print(gt_bboxes_list[0].gravity_center)   # bottom center +z_size//2
        # print(gt_bboxes_list[0].tensor)   #[num_box, 7],each row is[ bottom center(x,y,z) + x_size y_size z_size yaw ]
        # then we broadcast it to every decoder layer
        # print('gt list len: {}'.format(len(gt_bboxes_list)))
6
tensor([0, 0, 0, 0, 0, 0, 0, 0, 0], device='cuda:0')
tensor([[-1.8533, -2.8750,  0.9809],
        [52.5488, -2.7542,  0.8157],
        [16.7856, -2.9871,  0.7306],
        [ 3.8370, -2.7635,  1.0061],
        [37.5735, -7.1503,  0.8254],
        [44.2214,  7.2841,  1.0041],
        [37.2163, -9.5181,  0.7998],
        [28.7357, -2.8962,  0.4452],
        [62.2913, -2.7083,  1.2889]])
tensor([[-1.8533e+00, -2.8750e+00, -1.8414e-01,  1.9900e+00,  4.6200e+00,
          2.3300e+00, -1.5700e+00],
        [ 5.2549e+01, -2.7542e+00, -8.9313e-02,  2.0700e+00,  4.8600e+00,
          1.8100e+00, -1.5700e+00],
        [ 1.6786e+01, -2.9871e+00, -3.7942e-01,  2.0300e+00,  3.7700e+00,
          2.2200e+00, -1.5500e+00],
        [ 3.8370e+00, -2.7635e+00, -2.1888e-01,  2.1000e+00,  4.8800e+00,
          2.4500e+00, -1.5700e+00],
        [ 3.7573e+01, -7.1503e+00, -2.2457e-01,  2.2000e+00,  4.5200e+00,
          2.1000e+00, -1.6500e+00],
        [ 4.4221e+01,  7.2841e+00, -6.0861e-02,  2.2700e+00,  4.8100e+00,
          2.1300e+00, -1.4800e+00],
        [ 3.7216e+01, -9.5181e+00, -1.4017e-01,  2.0000e+00,  4.7400e+00,
          1.8800e+00, -1.4900e+00],
        [ 2.8736e+01, -2.8962e+00, -4.6982e-01,  2.1200e+00,  4.6600e+00,
          1.8300e+00, -1.5600e+00],
        [ 6.2291e+01, -2.7083e+00,  2.7387e-01,  1.9400e+00,  4.4600e+00,
          2.0300e+00, -1.5300e+00]])

waymo:
'd0.loss_bbox': tensor(0.7323, device='cuda:0', grad_fn=<NanToNumBackward0>), 
'd1.loss_bbox': tensor(0.5392, device='cuda:0', grad_fn=<NanToNumBackward0>), 
'd2.loss_bbox': tensor(0.6457, device='cuda:0', grad_fn=<NanToNumBackward0>), 
'd3.loss_bbox': tensor(0.5866, device='cuda:0', grad_fn=<NanToNumBackward0>), 
'd4.loss_bbox': tensor(0.5598, device='cuda:0', grad_fn=<NanToNumBackward0>)}
'loss_bbox': tensor(0.5592, device='cuda:0', grad_fn=<NanToNumBackward0>), 
nuscene:
'd0.loss_bbox': tensor(0.9336, device='cuda:0', grad_fn=<NanToNumBackward0>), 
'd1.loss_bbox': tensor(0.8454, device='cuda:0', grad_fn=<NanToNumBackward0>), 
'd2.loss_bbox': tensor(0.8131, device='cuda:0', grad_fn=<NanToNumBackward0>), 
'd3.loss_bbox': tensor(0.7811, device='cuda:0', grad_fn=<NanToNumBackward0>), 
'd4.loss_bbox': tensor(0.7929, device='cuda:0', grad_fn=<NanToNumBackward0>)}
'loss_bbox': tensor(0.7665, device='cuda:0', grad_fn=<NanToNumBackward0>), 



transfusion_loading.py:
        print(results['ann_info'])
'gt_bboxes_3d': LiDARInstance3DBoxes(
    tensor([[-1.4093e+01, -2.8760e+00, -1.5368e-01,  2.3700e+00,  6.1400e+00,
          3.2000e+00, -1.5200e+00],
        [-1.8533e+00, -2.8750e+00, -1.8414e-01,  1.9900e+00,  4.6200e+00,
          2.3300e+00, -1.5700e+00],
        [-2.9276e+01,  9.9904e+00, -9.0648e-01,  2.3900e+00,  5.7800e+00,
          2.1300e+00, -6.0000e-02],
        [ 5.2549e+01, -2.7542e+00, -8.9313e-02,  2.0700e+00,  4.8600e+00,
          1.8100e+00, -1.5700e+00],
        [-6.6676e+00, -8.5576e+00,  5.5529e-01,  2.2500e+00,  4.4000e+00,
          2.1400e+00, -1.0000e-02],
        [-2.4427e+01, -6.8765e+00, -2.8272e-01,  2.2500e+00,  4.4200e+00,
          1.6900e+00,  1.0000e-02],
        [ 1.6786e+01, -2.9871e+00, -3.7942e-01,  2.0300e+00,  3.7700e+00,
          2.2200e+00, -1.5500e+00],
        [ 3.8370e+00, -2.7635e+00, -2.1888e-01,  2.1000e+00,  4.8800e+00,
          2.4500e+00, -1.5700e+00],
        [ 3.7573e+01, -7.1503e+00, -2.2457e-01,  2.2000e+00,  4.5200e+00,
          2.1000e+00, -1.6500e+00],
        [ 4.4221e+01,  7.2841e+00, -6.0861e-02,  2.2700e+00,  4.8100e+00,
          2.1300e+00, -1.4800e+00],
        [ 3.7216e+01, -9.5181e+00, -1.4017e-01,  2.0000e+00,  4.7400e+00,
          1.8800e+00, -1.4900e+00],
        [ 2.8736e+01, -2.8962e+00, -4.6982e-01,  2.1200e+00,  4.6600e+00,
          1.8300e+00, -1.5600e+00],
        [ 6.2291e+01, -2.7083e+00,  2.7387e-01,  1.9400e+00,  4.4600e+00,
          2.0300e+00, -1.5300e+00]])), 
 'gt_labels_3d': array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 'bboxes': array([[   0.  ,    0.  ,    0.  ,    0.  ],
       [1558.62,  221.84, 1920.  ,  887.  ],
       [   0.  ,    0.  ,    0.  ,    0.  ],
       [1010.44,  638.87, 1104.92,  718.99],
       [   0.  ,    0.  ,    0.  ,    0.  ],
       [   0.  ,    0.  ,    0.  ,    0.  ],
       [1180.23,  660.33, 1554.57, 1020.59],
       [1641.37,  558.68, 1920.  , 1281.  ],
       [1258.57,  641.98, 1457.43,  775.55],
       [ 503.65,  616.21,  673.15,  727.42],
       [1413.36,  652.16, 1584.5 ,  775.24],
       [1071.52,  677.42, 1267.99,  843.41],
       [1001.67,  616.97, 1071.3 ,  689.81]],



        # print(cls_scores_list)
        # print(bbox_preds_list)
        # print(gt_labels_list)
        # print(gt_bboxes_list)
        # print(gt_bboxes_ignore_list)

[tensor([[-3.3857, -4.9088, -5.8244],
        [-1.9282, -3.1226, -3.5442],
        [-3.7268, -5.2440, -5.9499],
        ...,
        [-3.7139, -2.9854, -4.3504],
        [-4.1378, -2.3929, -3.6527],
        [-3.9067, -2.9024, -4.2609]], device='cuda:0',
       grad_fn=<SelectBackward0>)]
[tensor([[ 5.2264e+01, -3.3479e+01,  7.0723e-01,  ...,  5.4291e-01,
          4.3594e-02,  2.2288e-01],
        [ 5.5381e+01, -1.0780e+01,  6.7095e-01,  ...,  4.7822e-01,
         -6.1215e-01, -4.4872e-01],
        [ 9.2900e+00,  3.5146e+01,  7.4628e-01,  ...,  5.7808e-01,
          4.3355e-02, -1.1726e-01],
        ...,
        [ 6.7018e+01, -3.9672e+01, -2.8744e-02,  ...,  5.6312e-01,
          2.7014e-02,  8.7246e-02],
        [ 3.3796e+01,  1.3314e+01, -1.5761e-01,  ...,  5.3289e-01,
          4.0098e-02,  4.7432e-02],
        [ 6.6377e+01, -5.0186e+00, -8.0742e-02,  ...,  5.1210e-01,
          2.4435e-02,  5.2954e-02]], device='cuda:0',
       grad_fn=<SelectBackward0>)]
[tensor([0, 0, 0, 0, 0, 0, 0, 0, 0], device='cuda:0')]
[tensor([[-1.8533, -2.8750,  0.9809,  1.9900,  4.6200,  2.3300, -1.5700],
        [52.5488, -2.7542,  0.8157,  2.0700,  4.8600,  1.8100, -1.5700],
        [16.7856, -2.9871,  0.7306,  2.0300,  3.7700,  2.2200, -1.5500],
        [ 3.8370, -2.7635,  1.0061,  2.1000,  4.8800,  2.4500, -1.5700],
        [37.5735, -7.1503,  0.8254,  2.2000,  4.5200,  2.1000, -1.6500],
        [44.2214,  7.2841,  1.0041,  2.2700,  4.8100,  2.1300, -1.4800],
        [37.2163, -9.5181,  0.7998,  2.0000,  4.7400,  1.8800, -1.4900],
        [28.7357, -2.8962,  0.4452,  2.1200,  4.6600,  1.8300, -1.5600],
        [62.2913, -2.7083,  1.2889,  1.9400,  4.4600,  2.0300, -1.5300]],
       device='cuda:0')]
None

确实是把不在image内的box筛掉了，但不知道为什么还是错

def _get_target_single:
        print(cls_scores.size())
        print(bbox_preds.size())
torch.Size([1, 900, 3])
torch.Size([1, 900, 8])

print(gt_bboxes.size())
        #torch.Size([9, 7])

        print(pos_inds)# match上的query
        print(neg_inds)#没match上的query
        exit(0)
        
        print(label_weights.size()) #torch.Size([900])
        print(labels.size())    #torch.Size([900])
        exit(0)

        print(sampling_result.pos_gt_bboxes.size())#torch.Size([9, 7])
        exit(0)
def loss_single:
        print(bbox_targets_list[0].size())
        print(labels_list[0].size())
        torch.Size([900, 7])
        torch.Size([900])
        exit(0)
        print(cls_scores.size())
        cls_scores = cls_scores.reshape(-1, self.cls_out_channels)
        print(cls_scores.size())
        torch.Size([1, 900, 3])
        torch.Size([900, 3])
        exit(0)


hungarian_assigner_3d.py:
        print(assigned_gt_inds.size())
        print(assigned_labels.size())
        torch.Size([900])
        torch.Size([900])

        print(normalized_gt_bboxes.size())#torch.Size([9, 8])
        print(reg_cost.size())#torch.Size([900, 9]), 9 for num_gt

        print(matched_row_inds)
        print(matched_col_inds)
        tensor([ 32,  38, 341, 398, 432, 469, 701, 721, 849], device='cuda:0')
        tensor([5, 1, 0, 8, 2, 6, 4, 7, 3], device='cuda:0')
        exit(0)


in mmdet.models.losses.focal_loss.py:
class Focal_loss
    in waymo:
        print(pred.sigmoid()[30:40,:])
        print(target[30:40])
        num_classes = pred.size(1)
        print(num_classes)
        target = F.one_hot(target, num_classes=num_classes + 1)
        target = target[:, :num_classes]
        print(target[30:40,:])

    tensor([[0.0201, 0.0458, 0.0117],
        [0.0346, 0.0471, 0.0104],
        [0.1613, 0.0404, 0.0294],
        [0.0235, 0.0501, 0.0129],
        [0.0119, 0.0051, 0.0021],
        [0.0511, 0.0753, 0.0201],
        [0.1180, 0.0478, 0.0230],
        [0.0239, 0.0855, 0.0264],
        [0.3305, 0.0284, 0.0404],
        [0.2975, 0.0467, 0.0584]], device='cuda:0', grad_fn=<SliceBackward0>)
tensor([3, 3, 0, 3, 3, 3, 3, 3, 0, 3], device='cuda:0')
3
tensor([[0, 0, 0],
        [0, 0, 0],
        [1, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        [1, 0, 0],
        [0, 0, 0]], device='cuda:0')

        in nuscene:
        print(pred.sigmoid()[-30:-10,:])
        print(target[-30:-10])
        num_classes = pred.size(1)
        print(num_classes)
        target = F.one_hot(target, num_classes=num_classes + 1)
        target = target[:, :num_classes]
        print(target[-30:-10,:])
        exit(0)

                 0.0091],
        [0.0247, 0.0085, 0.0027, 0.0037, 0.0053, 0.0108, 0.0314, 0.0401, 0.0412,
         0.0180],
        [0.2052, 0.0812, 0.0160, 0.0139, 0.0129, 0.0151, 0.0260, 0.0116, 0.0305,
         0.0132],
        [0.0024, 0.0016, 0.0007, 0.0015, 0.0025, 0.0055, 0.0061, 0.0075, 0.0399,
         0.0217],
        [0.0962, 0.0621, 0.0321, 0.0452, 0.0166, 0.0094, 0.0133, 0.0094, 0.0193,
         0.0061],
        [0.2010, 0.0914, 0.0230, 0.0444, 0.0283, 0.0159, 0.0182, 0.0106, 0.0249,
         0.0102],
        [0.4415, 0.1030, 0.0110, 0.0363, 0.0115, 0.0140, 0.0170, 0.0073, 0.0120,### here！！！
         0.0050],
        [0.0160, 0.0131, 0.0053, 0.0071, 0.0043, 0.0045, 0.0035, 0.0034, 0.0112,
         0.0037],
        [0.0031, 0.0028, 0.0022, 0.0025, 0.0033, 0.0067, 0.0064, 0.0109, 0.0369,
         0.0211],
        [0.0222, 0.0132, 0.0043, 0.0084, 0.0057, 0.0080, 0.0339, 0.0423, 0.0992,
         0.0105],
        [0.0153, 0.0133, 0.0064, 0.0068, 0.0098, 0.0311, 0.0218, 0.0349, 0.2044,
         0.0588],
        [0.0303, 0.0208, 0.0091, 0.0125, 0.0112, 0.0067, 0.0056, 0.0049, 0.0108,
         0.0044],
        [0.0221, 0.0165, 0.0180, 0.0067, 0.0163, 0.0648, 0.0644, 0.1813, 0.3779,
         0.0524]], device='cuda:0', grad_fn=<SliceBackward0>)

tensor([10, 10, 10, 10,  1, 10, 10, 10, 10, 10, 10, 10, 10,  0, 10, 10, 10, 10,
        10, 10], device='cuda:0')
10
tensor([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], device='cuda:0')

in detr3d.py: 
def forward_train_pts
        # print(bbox_list)
        # print(bbox_list[0][2].size())
        # print(losses)
        # exit(0)
[[LiDARInstance3DBoxes(
    tensor([[  3.8879,  -2.9299,   0.1081,  ...,   4.5904,   1.7214,  -1.5707],
        [ 51.1691,  -2.9902,   0.4201,  ...,   4.6396,   1.7700,  -1.5760],
        [ 47.7218,  -2.7226,   0.5226,  ...,   4.4436,   1.7042,  -1.5761],
        ...,
        [ 52.1674, -10.3602,   0.4818,  ...,   0.9455,   1.6597,   1.7262],
        [ 74.1230,  -3.4130,   0.8818,  ...,   0.9200,   1.7082,  -1.7486],
        [ 25.2527,  20.8638,  -0.4444,  ...,   4.5777,   1.7415,   3.1176]],
       device='cuda:0', grad_fn=<CloneBackward0>)), 
tensor([0.4202, 0.3044, 0.3041, 0.2995, 0.2967, 0.2892, 0.2869, 0.2849, 0.2788,
...
        0.2755, 0.2729, 0.2685, 0.2684, 0.2664, 0.2634, 0.2609, 0.2488, 0.2438,
        0.2397, 0.2281, 0.2187, 0.2170, 0.2133, 0.2078, 0.2058, 0.2011, 0.2000,                                                                                                                      0.1940, 0.1912, 0.1881, 0.1859, 0.1839, 0.1825, 0.1799, 0.1771, 0.1745,
        0.1615, 0.1609, 0.1532, 0.1530, 0.1526, 0.1514, 0.1503, 0.1497, 0.1490,
        0.1451, 0.1412, 0.1392, 0.1381, 0.1374, 0.1339, 0.1299, 0.1284, 0.1281,
        0.0659, 0.0658, 0.0656, 0.0656, 0.0654, 0.0654, 0.0653, 0.0647, 0.0646,
        0.0643, 0.0642, 0.0641, 0.0641, 0.0640, 0.0639, 0.0638, 0.0637, 0.0636,
        0.0635, 0.0634, 0.0632, 0.0627, 0.0626, 0.0618, 0.0617, 0.0616, 0.0614,
        0.0614, 0.0607, 0.0606, 0.0605, 0.0604, 0.0603, 0.0603, 0.0602, 0.0601,
        0.0600, 0.0598, 0.0597, 0.0596, 0.0596, 0.0595, 0.0592, 0.0591, 0.0589,
        0.0588, 0.0588, 0.0588, 0.0584, 0.0584, 0.0584, 0.0582, 0.0582, 0.0580,
        0.0577, 0.0577, 0.0574, 0.0574, 0.0573, 0.0570, 0.0569, 0.0569, 0.0566,
        0.0566, 0.0565, 0.0563, 0.0563, 0.0563, 0.0562, 0.0562, 0.0560, 0.0560,
        0.0559, 0.0556, 0.0555, 0.0554, 0.0554, 0.0554, 0.0554, 0.0551, 0.0550,
        0.0549, 0.0548, 0.0547, 0.0546, 0.0546, 0.0545, 0.0545, 0.0544, 0.0542,
        0.0542, 0.0542, 0.0541, 0.0539, 0.0539, 0.0538, 0.0537, 0.0537, 0.0534,
        0.0534, 0.0533, 0.0533, 0.0532, 0.0532, 0.0532, 0.0531, 0.0531, 0.0530,
        0.0530, 0.0529, 0.0525], device='cuda:0', grad_fn=<IndexBackward0>), 
tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1,
        1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0,
        1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0,
        0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0,
        0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0,
        1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1,
        0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0,
        0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0,
        0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 1, 1,
        0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0], device='cuda:0')]]
torch.Size([300])
{'loss_cls': tensor([0.5471], device='cuda:0', grad_fn=<NanToNumBackward0>), 'loss_bbox': tensor(0.5592, device='cuda:0', grad_fn=<NanToNumBackward0>), 'd0.loss_cls': tensor([0.5700], device='cuda:0', grad_fn=<NanToNumBackward0>), 'd0.loss_bbox': tensor(0.7323, device='cuda:0', grad_fn=<NanToNumBackward0>), 'd1.loss_cls': tensor([0.5826], device='cuda:0', grad_fn=<NanToNumBackward0>), 'd1.loss_bbox': tensor(0.5392, device='cuda:0', grad_fn=<NanToNumBackward0>), 'd2.loss_cls': tensor([0.5713], device='cuda:0', grad_fn=<NanToNumBackward0>), 'd2.loss_bbox': tensor(0.6457, device='cuda:0', grad_fn=<NanToNumBackward0>), 'd3.loss_cls': tensor([0.5348], device='cuda:0', grad_fn=<NanToNumBackward0>), 'd3.loss_bbox': tensor(0.5866, device='cuda:0', grad_fn=<NanToNumBackward0>), 'd4.loss_cls': tensor([0.5316], device='cuda:0', grad_fn=<NanToNumBackward0>), 'd4.loss_bbox': tensor(0.5598, device='cuda:0', grad_fn=<NanToNumBackward0>)}

loss cls:tensor([7.7035e-05], device='cuda:0', grad_fn=<NanToNumBackward0>)
loss reg:0.12999416887760162
loss cls:tensor([0.0327], device='cuda:0', grad_fn=<NanToNumBackward0>)
loss reg:0.5679402947425842 
loss cls:tensor([2.8434e-05], device='cuda:0', grad_fn=<NanToNumBackward0>)
loss reg:0.05074688419699669
loss cls:tensor([4.5535e-05], device='cuda:0', grad_fn=<NanToNumBackward0>)                                   [162/1987]
loss reg:0.05031157284975052
loss cls:tensor([0.0002], device='cuda:0', grad_fn=<NanToNumBackward0>)
loss reg:0.20542655885219574
loss cls:tensor([0.0003], device='cuda:0', grad_fn=<NanToNumBackward0>)
loss reg:0.14779964089393616
tensor([[0.6155, 0.0013, 0.0020],                                                                                               [0.8595, 0.0015, 0.0022],
        [0.8068, 0.0014, 0.0020],                                                                                               [0.8651, 0.0015, 0.0023],
        [0.8274, 0.0016, 0.0023]], device='cuda:0', grad_fn=<IndexBackward0>)
tensor([0, 0, 0, 0, 0], device='cuda:0')
tensor([[25.8952, 15.5669,  0.7493,  1.4695,  1.4605,  0.5804, -0.1977,  0.2855],
        [31.1597, -2.4714,  0.9138,  1.8907,  3.9444,  1.1605, -0.9873,  0.2046],
        [19.3586, 14.9539,  0.8605,  1.7503,  1.2404,  0.7177,  0.0865,  0.9741],
        [43.6282, -6.2398,  0.7183,  1.5651,  3.9470,  0.8902, -0.9634,  0.1801],
        [22.1866, -5.8528,  0.8149,  1.6113,  1.8572,  0.5555,  0.1304,  0.9139]],
       device='cuda:0', grad_fn=<IndexBackward0>)
tensor([[26.9726, 15.8020,  0.7467,  1.4770,  1.4912,  0.5481, -0.1806, -0.9836],
        [31.9627, -2.3585,  0.8629,  1.8148,  3.8025,  1.1632, -0.9779,  0.2092],
        [19.2586, 12.8921,  0.8713,  1.7544,  0.9275,  0.7561,  0.1098,  0.9940],
        [43.8508, -4.3824,  0.6881,  1.5304,  4.1354,  0.8459, -0.9871,  0.1601],
        [21.2092, -4.6236,  0.8109,  1.4861,  2.0097,  0.5247,  0.1692,  0.9856]],
       device='cuda:0')
loss cls:tensor([0.0092], device='cuda:0', grad_fn=<NanToNumBackward0>)
loss reg:0.5747453570365906

nuscene:
tensor([1, 8, 8, 0, 0], device='cuda:0')
tensor([[-3.3902e+01,  2.2507e+01,  6.2847e-01,  1.5349e+00, -1.4710e+00,
          6.8081e-01,  9.9034e-01,  2.6740e-02,  2.6029e-03,  2.2960e-04],
        [ 1.0737e+01,  5.4626e+00, -5.0729e-01, -5.0437e-01,  1.8595e-01,
          2.5866e-01,  1.0420e+00, -4.3959e-02, -2.6943e-03,  1.7741e-02],
        [-1.2351e+01,  8.9229e+00, -2.4286e-01, -6.5535e-02, -7.3673e-01,
          6.0076e-01,  5.5775e-02, -9.7638e-01, -1.2119e-01,  1.6497e+00],
        [-3.3748e+01, -6.7303e+00,  6.7430e-01,  1.5489e+00, -1.7242e+00,
          5.3047e-01,  1.0410e+00, -8.6697e-04,  4.9677e-03, -9.0689e-03],
        [ 3.2282e+00, -2.4440e+01,  8.2172e-01,  1.7756e+00, -5.9286e-01,
          8.6260e-01,  9.8130e-01, -1.2287e-02,  5.9006e-04,  3.7956e-03]],
       device='cuda:0', grad_fn=<SliceBackward0>)
tensor([[-3.3878e+01,  2.2499e+01,  6.2165e-01,  1.5210e+00, -1.5550e+00,
          6.6732e-01,  9.9969e-01,  2.4702e-02,  0.0000e+00,  0.0000e+00],
        [ 1.0924e+01,  5.6014e+00, -4.9758e-01, -4.7642e-01,  2.2383e-01,
          2.7079e-01,  9.9931e-01, -3.7190e-02,  0.0000e+00,  0.0000e+00],
        [-1.2683e+01,  9.0922e+00, -2.2690e-01, -4.8140e-02, -7.5744e-01,
          5.7998e-01,  6.3562e-02, -9.9798e-01, -1.1216e-01,  2.6816e+00],
        [-3.3907e+01, -6.6384e+00,  6.4763e-01,  1.5310e+00, -1.7607e+00,
          5.4985e-01,  1.0000e+00, -2.2918e-03,  1.8977e-01, -5.0661e-03],
        [ 3.2708e+00, -2.4673e+01,  7.8390e-01,  1.7584e+00, -6.4452e-01,
          8.3855e-01,  9.9996e-01, -8.9713e-03,  0.0000e+00,  0.0000e+00]],
       device='cuda:0')
loss cls:tensor([0.0002], device='cuda:0', grad_fn=<NanToNumBackward0>)
loss reg:0.09568344056606293